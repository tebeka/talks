


 12         | Suite(stmt* body)
 13 
 14     stmt = FunctionDef(identifier name, arguments args,
 15                        stmt* body, expr* decorator_list, expr? returns,
 16                        string? type_comment)
 17           | AsyncFunctionDef(identifier name, arguments args,
 18                              stmt* body, expr* decorator_list, expr? return    s,
 19                              string? type_comment)
 20 
 21           | ClassDef(identifier name,
 22              expr* bases,
 23              keyword* keywords,
 24


 34           -- use 'orelse' because else is a keyword in target languages
 35           | For(expr target, expr iter, stmt* body, stmt* orelse, string? t    ype_comment)
 36           | AsyncFor(expr target, expr iter, stmt* body, stmt* orelse, stri    ng? type_comment)
 37           | While(expr test, stmt* body, stmt* orelse)
 38           | If(expr test, stmt* body, stmt* orelse)
 39           | With(withitem* items, stmt* body, string? type_comment)
 40           | AsyncWith(withitem* items, stmt* body, string? type_comment)
 41 
 42           | Raise(expr? exc, expr? cause)
 43           | Try(stmt* body, excepthandler* handlers, stmt* orelse, stmt* fi    nalbody)
 44


 54           -- XXX Jython will be different
 55           -- col_offset is the byte offset in the utf8 string the parser us    es
 56           attributes (int lineno, int col_offset, int? end_lineno, int? end    _col_offset)
 57 
 58           -- BoolOp() can use left & right?
 59     expr = BoolOp(boolop op, expr* values)
 60          | NamedExpr(expr target, expr value)
 61          | BinOp(expr left, operator op, expr right)
 62          | UnaryOp(unaryop op, expr operand)
 63          | Lambda(arguments args, expr body)
 64          | IfExp(expr test, expr body, expr orelse)
 65


 74          | YieldFrom(expr value)
 75          -- need sequences for compare to distinguish between
 76          -- x < 4 < 3 and (x < 4) < 3
 77          | Compare(expr left, cmpop* ops, expr* comparators)
 78          | Call(expr func, expr* args, keyword* keywords)
 79          | FormattedValue(expr value, int? conversion, expr? format_spec, s    tring? expr_text)
 80          | JoinedStr(expr* values)
 81          | Constant(constant value, string? kind)
 82 
 83          -- the following expression can appear in assignment context
 84          | Attribute(expr value, identifier attr, expr_context ctx)
 85          | Subscript(expr value, slice slice, expr_context ctx)
 86








118            attributes (int lineno, int col_offset, int? end_lineno, int? en    d_col_offset)
119 
120     -- keyword arguments supplied to call (NULL identifier for **kwargs)
121     keyword = (identifier? arg, expr value)
122 
123     -- import name with optional 'as' alias.
124     alias = (identifier name, identifier? asname)
125 
126     withitem = (expr context_expr, expr? optional_vars)
127 
128     type_ignore = TypeIgnore(int lineno)
129 }
130
» 12
12.0
» Yalla Bye ☺

In [43]: x                                                                     
Out[43]: 1

In [44]: globals()['x']                                                        
Out[44]: 1

In [45]: %run humble.py                                                        
» (* 3 7)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~/Projects/talks/pyconil-2019/make-a-lisp/humble.py in <module>
     73 if __name__ == '__main__':
     74     import readline  # History with arrows, paren highlight ...# noqa
---> 75     repl()
     76 
     77 # code = '(if (even? n) (/ n 2) (+ (* 3 n) 1))'

~/Projects/talks/pyconil-2019/make-a-lisp/humble.py in repl()
     64             # TODO: tokenize, read s-expression, print tree
     65             s_expr = reader(code)
---> 66             val = evaluate(s_expr)
     67             print(val)
     68         except (EOFError, KeyboardInterrupt):

~/Projects/talks/pyconil-2019/make-a-lisp/humble.py in evaluate(expr)
     49         func = evaluate(op)
     50         args = [evaluate(arg) for arg in rest]
---> 51         return func(*args)
     52 
     53 

TypeError: 'NoneType' object is not callable
In [46]: repl()                                                                
» *
None
» Yalla Bye ☺

In [47]: %run humble.py                                                        
» (* 3 7)
21.0
» Yalla Bye ☺

In [48]: 1/3                                                                   
Out[48]: 0.3333333333333333

In [49]: 1//3                                                                  
Out[49]: 0

In [50]:X = 3                                                                 

In [51]: x = 1                                                                 

In [52]: x                                                                     
Out[52]: 1

In [53]: X                                                                     
Out[53]: 3

In [54]: def inc(n): 
    ...:     return n + 1 
    ...:                                                                       

In [55]: inc(10)                                                               
Out[55]: 11

In [56]:inc = 7                                                               

In [57]: inc(10)                                                               
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-57-78dc1b1d523d> in <module>
----> 1 inc(10)

TypeError: 'int' object is not callable

In [58]: 2 * 7                                                                 
Out[58]: 14

In [59]: 'a' + 'b'                                                             
Out[59]: 'ab'

In [60]:'a'._add__('b')                                                       
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-60-25516595db6d> in <module>
----> 1 'a'._add__('b')

AttributeError: 'str' object has no attribute '_add__'

In [61]: 'a'.__add__('b')                                                      
Out[61]: 'ab'

In [62]: (2).__mul__(7)                                                        
Out[62]: 14

In [63]: 2 * 7                                                                 
Out[63]: 14

In [64]:'a' * 'b'                                                             
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-64-f16ddcabf702> in <module>
----> 1 'a' * 'b'

TypeError: can't multiply sequence by non-int of type 'str'

In [65]: True                                                                  
Out[65]: True

In [66]: False                                                                 
Out[66]: False

In [67]: bool(7)                                                               
Out[67]: True

In [68]:if 7: 
    ...:     print('OK') 
    ...:                                                                       
OK

In [69]: # In Python everything is True, except                                

In [70]: # 0 numbers: 0, 0.0, 0+0j ...                                         

In [71]: # Empty collections: [], '', (), {}, ....                             

In [72]: # None & False                                                        

In [73]: # You can define __bool__ in your types                               

In [74]: items = []                                                            
In [75]: if len(items) == 0: 
    ...:     print('no items') 
    ...:                                                                       
no items

In [76]: if not items: 
    ...:     print('no items') 
    ...:                                                                       
no items

In [77]: %run humble.py                                                        
» (if (> 1 2) 10 20)
20.0
» (if (> 10 2) 10 20)
10.0
»Yalla Bye ☺

In [78]: if True: 
    ...:     print('OK') 
    ...: else: 
    ...:     1/0 
    ...:                                                                       
OK

In [79]: def myif(cond, t, f): 
    ...:     if cond: 
    ...:         return t 
    ...:     return f 
    ...:                                                                       

In [80]: myif(True, 'OK', 1/0)                                                 ---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
<ipython-input-80-507aac02410f> in <module>
----> 1 myif(True, 'OK', 1/0)

ZeroDivisionError: division by zero

In [81]: True or 1/0                                                           
Out[81]: True

In [82]: 1/0 or True                                                           
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
<ipython-input-82-962cfa768e45> in <module>
----> 1 1/0 or True

ZeroDivisionError: division by zero

In [83]:%run humble.py                                                        
» (or 1 0)
1.0
» (or 0 0)
0.0
» (or 1 (/ 1 0))
1.0
» (/ 1 0)
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
~/Projects/talks/pyconil-2019/make-a-lisp/humble.py in <module>
    106 if __name__ == '__main__':
    107     import readline  # History with arrows, paren highlight ...# noqa
--> 108     repl()
    109 
    110 # code = '(if (even? n) (/ n 2) (+ (* 3 n) 1))'

~/Projects/talks/pyconil-2019/make-a-lisp/humble.py in repl()
     97             # TODO: tokenize, read s-expression, print tree
     98             s_expr = reader(code)
---> 99             val = evaluate(s_expr)
    100             print(val)
    101         except (EOFError, KeyboardInterrupt):

~/Projects/talks/pyconil-2019/make-a-lisp/humble.py in evaluate(expr)
     85     func = evaluate(op)
     86     args = [evaluate(arg) for arg in rest]
---> 87     return func(*args)
     88 
     89 

ZeroDivisionError: float division by zero

In [84]:%run humble.py                                                        
» (/ 1 0)
ERROR: float division by zero
» Yalla Bye ☺

In [85]: %run humble.py                                                        
» (/ 1 0)
ERROR: ZeroDivisionError float division by zero
» (or 1 (/ 1 0))
1.0
» (and 0 (/ 1 0))
0.0
» Yalla Bye ☺

In [86]: x = 3 * 7                                                             
In [87]: x                                                                     
Out[87]: 21

In [88]: %run humble.py                                                        
» (define pi 3.14)
3.14
» (* pi 10)
31.400000000000002
» Yalla Bye ☺

In [89]: %run humble.py                                                        
» (define x 1)
1.0
» x
1.0
» (set! x 2)
2.0
»x
2.0
» (set! y 8)
ERROR: NameError y
» Yalla Bye ☺

In [90]: def fn(): 
    ...:     1 / 0 
    ...:                                                                       

In [91]: fn()                                                                  
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
<ipython-input-91-e1d0f67027b9> in <module>
----> 1 fn()

<ipython-input-90-a73c276295be> in fn()
      1 def fn():
----> 2     1 / 0
      3 

ZeroDivisionError: division by zero

In [92]:ffn                                                                   
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-92-1cc4cbd793f0> in <module>
----> 1 ffn

NameError: name 'ffn' is not defined

In [93]: fn                                                                    
Out[93]: <function __main__.fn()>

In [94]: fn.__code__.co_argcount                                               
Out[94]: 0

In [95]: fn.__code__.co_freevars                                               
Out[95]: ()
In [96]: repl()                                                                
» /
<built-in function truediv>
» Yalla Bye ☺

In [97]: x = 1                                                                 

In [98]: def func(): 
    ...:     x = 7 
    ...:     print(x) 
    ...:                                                                       

In [99]: func()                                                                
7

In [100]: x                                                                    Out[100]: 1

In [101]: %run humble.py                                                       
» (lambda (n) (+ n 1))
Lambda(args=['n'], body=['+', 'n', 1.0], env=ChainMap({'+': <built-in function add>, '-': <built-in function sub>, '*': <built-in function mul>, '/': <built-in function truediv>, '%': <built-in function mod>, '>': <built-in function gt>, '<': <built-in function lt>, '=': <built-in function eq>}))
» (define inc (lambda (n) (+ n 1)))
Lambda(args=['n'], body=['+', 'n', 1.0], env=ChainMap({'+': <built-in function add>, '-': <built-in function sub>, '*': <built-in function mul>, '/': <built-in function truediv>, '%': <built-in function mod>, '>': <built-in function gt>, '<': <built-in function lt>, '=': <built-in function eq>, 'inc': ...}))
» (inc 10)
ERROR: TypeError 'Lambda' object is not callable
» Yalla Bye ☺

In [102]:callable(operator.mul)                                               
Out[102]: True

In [103]: %run humble.py                                                       
» (define inc (lambda (n) (+ n 1)))
Lambda(args=['n'], body=['+', 'n', 1.0], env=ChainMap({'+': <built-in function add>, '-': <built-in function sub>, '*': <built-in function mul>, '/': <built-in function truediv>, '%': <built-in function mod>, '>': <built-in function gt>, '<': <built-in function lt>, '=': <built-in function eq>, 'inc': ...}))
» (inc 10)
ERROR: KeyError 'n'
» Yalla Bye ☺

In [104]: %run humble.py                                                       
» (define inc (lambda (n) (+ n 1)))
Lambda(args=['n'], body=['+', 'n', 1.0], env=ChainMap({'+': <built-in function add>, '-': <built-in function sub>, '*': <built-in function mul>, '/': <built-in function truediv>, '%': <built-in function mod>, '>': <built-in function gt>, '<': <built-in function lt>, '=': <built-in function eq>, 'inc': ...}))
»(inc 10)
11.0
» (define make-adder (n) (lambda (val) (+ val n)))
ERROR: ValueError too many values to unpack (expected 2)
» (define make-adder (lambda (n) (lambda (val) (+ val n))))
Lambda(args=['n'], body=['lambda', ['val'], ['+', 'val', 'n']], env=ChainMap({'+': <built-in function add>, '-': <built-in function sub>, '*': <built-in function mul>, '/': <built-in function truediv>, '%': <built-in function mod>, '>': <built-in function gt>, '<': <built-in function lt>, '=': <built-in function eq>, 'inc': Lambda(args=['n'], body=['+', 'n', 1.0], env=...), 'make-adder': ...}))
» (define add-7 (make-adder 7))
Lambda(args=['val'], body=['+', 'val', 'n'], env=ChainMap({'n': 7.0}, ChainMap({'+': <built-in function add>, '-': <built-in function sub>, '*': <built-in function mul>, '/': <built-in function truediv>, '%': <built-in function mod>, '>': <built-in function gt>, '<': <built-in function lt>, '=': <built-in function eq>, 'inc': Lambda(args=['n'], body=['+', 'n', 1.0], env=...), 'make-adder': Lambda(args=['n'], body=['lambda', ['val'], ['+', 'val', 'n']], env=...), 'add-7': ...})))
»(add-7 10)
17.0
» Yalla Bye ☺

In [105]: def make_adder(n): 
     ...:     def addr(val): 
     ...:         return val + n 
     ...:                                                                      

In [106]: add7 = make_adder(7)                                                 

In [107]: add7(10)                                                             
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-107-507f8bce4802> in <module>
----> 1 add7(10)

TypeError: 'NoneType' object is not callable

In [108]:def make_adder(n): 
     ...:     def adder(val): 
     ...:         return val + n 
     ...:     return adder                                                     

In [109]: add7 = make_adder(7)                                                 

In [110]: add7(10)                                                             
Out[110]: 17

In [111]: repl()                                                               
» (define fact (lambda (n) (if (< n 2) 1 (* n (fact (- n 1))))))
Lambda(args=['n'], body=['if', ['<', 'n', 2.0], 1.0, ['*', 'n', ['fact', ['-', 'n', 1.0]]]], env=ChainMap({'+': <built-in function add>, '-': <built-in function sub>, '*': <built-in function mul>, '/': <built-in function truediv>, '%': <built-in function mod>, '>': <built-in function gt>, '<': <built-in function lt>, '=': <built-in function eq>, 'inc': Lambda(args=['n'], body=['+', 'n', 1.0], env=...), 'make-adder': Lambda(args=['n'], body=['lambda', ['val'], ['+', 'val', 'n']], env=...), 'add-7': Lambda(args=['val'], body=['+', 'val', 'n'], env=ChainMap({'n': 7.0}, ...)), 'fact': ...}))
»(fact 10)
3628800.0
» Yalla Bye ☺

In [112]: