# Interfaces

Miki Tebeka
miki@353solutions.com
@tebeka

## Who Am I?

- Writing c̶o̶d̶e̶ bugs for 25 years
- 353solutions
- Help organize this meetup (and GopherCon Israel, and PyData Israel)
- LinkedIn Learning Author
- Writing Books

.image brain-teasers.png

## Please, Ask Questions

> You learn something by doing it yourself, by **asking questions**, by thinking, and by experimenting.  - Richard Feynman

.image Richard_Feynman_Nobel.jpg

## Let's Lawyer Up!

> An interface type defines a **type set** ...

> An interface type is specified by a **list of interface elements**. An interface element is **either a method or a type** element, where a type element is a union of one or more type terms...

> In its most **basic form** an interface specifies a (possibly empty) **list of methods**. 


[The Go Spec](https://go.dev/ref/spec#Interface_types)

## Example: io.Reader & io.Writer

.code io.go /START_IFACE/,/END_IFACE/

src/io/io.go

## Design Question

Why?

.code rdr.go /START_GO/,/END_GO/

And not?

.code rdr.go /START_PY/,/END_PY/

## Computing SHA1

Compute the SHA1 signature of the *uncompressed* content.

.code sha1.txt

## io.Copy & os.Open

.code cp.go /START_COPY/,/END_COPY/

Interfaces say what we need, not what we provide.

.code cp.go /START_OPEN/,/END_OPEN/
.code cp.go /START_FILE/,/END_FILE/

> Accept interfaces, return structs. - [Jack Lindamood](https://medium.com/@cep21/preemptive-interface-anti-pattern-in-go-54c18ac0668a)

Is it related to the [Robustness principle](https://en.wikipedia.org/wiki/Robustness_principle)?

> Be conservative in what you send, be liberal in what you accept. - Jon Postel


## Computing SHA1

.play -edit sha.go /START_SHA/,/END_SHA/

## Conditionally Computing SHA1

.play -edit sha2.go /START_SHA/,/END_SHA/

## Logger

.code logger.go /START_LOGGER/,/END_LOGGER/

## WriteSyncer

.code writesyncer.go /START_WS/,/END_WS/

However:
> The bigger the interface, the weaker the abstraction. - [Rob Pike](https://go-proverbs.github.io/)

The average interface size in the standard library is about 2 methods.

## syncer

.code logger2.go /START_SYNCER/,/END_SYNCER/

## log

.code logger2.go /START_LOG/,/END_LOG/

## Thou Shalt Not Pass

.code ptr.go /START_TYPES/,/END_TYPES/

## Thou Shalt Not Pass

.play -edit ptr.go /START_MAIN/,/END_MAIN/

## Thou Shalt Not Pass

.image method-sets.png

[Go Loves You](https://youtu.be/Z5cvLOrWlLM?t=356) - Bill Kennedy

## error

.code error.go /START_ERROR/,/END_ERROR/

src/builtin/builtin.go

## Let's Lawyer Up! (2)

> A type T implements an interface I if
>
> - T is not an interface and is an element of the type set of I; or
> - T is an interface and the type set of T is a subset of the type set of I.
> 
> A value of type T implements an interface if T implements the interface.

[The Go Spec](https://go.dev/ref/spec#Implementing_an_interface)

## AuthError

.code auth_err.go /START_AE/,/END_AE/
.code auth_err.go /START_LOGIN/,/END_LOGIN/

## AuthError - WAT?

.play -edit auth_err.go /START_MAIN/,/END_MAIN/

## Interface Implementation

.code iface.go /START_IFACE/,/END_IFACE/
src/runtime/runtime2.go

> An interface value is nil only if the V (data) and T (itab) are both unset - [Why is my nil error value not equal to nil?](https://go.dev/doc/faq#nil_error)

In our case, `itab` is not `nil`.

## AuthError - Fixed

.code auth_err2.go /START_LOGIN/,/END_LOGIN/
.play -edit auth_err2.go /START_MAIN/,/END_MAIN/

## fmt.Stringer

.code fmt.go /START_STR/,/END_STR/

src/fmt/print.go

## Fun with Flags

.code flags.go /START_FLAG/,/END_FLAG/

## Printing Flags

.play -edit flags.go /START_MAIN/,/END_MAIN/

See also [x/tools/cmd/stringer](https://pkg.go.dev/golang.org/x/tools/cmd/stringer).

## JSON

.code json.go /START_JSON/,/END_JSON/

src/encoding/json/encode.go

## Value

.code value.go /START_VALUE/,/END_VALUE/

Value{15.4, Celcius} -> "15.4c"

## Value - MarshalJSON

.code value.go /START_MJ/,/END_MJ/
.play -edit value.go /START_MAIN/,/END_MAIN/


## http.RoundTripper

.code round-tripper.txt

src/net/http/client.go

## APIClient

.code api_client_test.go /START_API_CLIENT/,/END_API_CLIENT/

## TestHealthError

.code api_client_test.go /START_TEST/,/END_TEST/

## Sorting

.code sort.go /START_IFACE/,/END_IFACE/

src/sort/sort.go

Go and read the [sort package examples](https://pkg.go.dev/sort#pkg-examples).

## Generics

>  An interface element is either a method or a type element, **where a type element is a union of one or more type terms. A type term is either a single type or a single underlying type**. - [Go spec](https://go.dev/ref/spec#Interface_types)

Notes:
- Added in [1.18](https://tip.golang.org/doc/go1.18#generics)
- No generics in the standard library. Only two changes:
    - **any** is an alias to `interface{}`
    - There's a **comparable** built-in interface, it is the set of all types which can be compared using == or !=. **It may only be used as (or embedded in) a type constraint**.

## A Statistics Package

.code stats.go /START_MAX/,/END_MAX/

## With Generics

.code -edit stats2.go /START_MAX/,/END_MAX/
.play -edit stats2.go /START_MAIN/,/END_MAIN/

## Using Generics

From [When To Use Generics](https://go.dev/blog/when-generics) by Ian Lance Taylor

- General purpose data structures
- Implementing a common method
    -  ... and the implementations for the different types all look the same.

See also:
- [x/exp/constraints](https://golang.org/x/exp/constraints)
- [x/exp/slices](https://golang.org/x/exp/slices)
- [x/exp/maps](https://golang.org/x/exp/maps)

## Summary

- Don't design with interfaces, discover them. - Rob Pike
- Accept interfaces, return structs. - [Jack Lindamood](https://medium.com/@cep21/preemptive-interface-anti-pattern-in-go-54c18ac0668a)
- The bigger the interface, the weaker the abstraction. - [Rob Pike](https://go-proverbs.github.io/)
- Get familiar with interfaces in the standard library. - Miki Tebeka (just now)
- You should avoid type parameters until you notice that you are about the write the exact same code multiple times. - [Ian Lance Taylor](https://go.dev/blog/when-generics)
