# Go Quiz
Guess the Output

Miki Tebeka
miki@ardanlabs.com
@tebeka

## 

.html quiz.html
.image me.png

## Quiz Rules

- I'll show a short program and ask what will happen when I run it
- You have 30 seconds to find out the output (multiple selection)
- After that, I'll run the program and then explain *why* we got such output
    - The idea is to learn, not show WATs
- There are 25 questions total

## 

<p style="font-size: 7em; margin-top: 30%; text-align: center;">
Let's Go!
</p>

## In Scope

.play -edit -numbers scope.go

- A: Won't compile
- B: 2 2
- C: 2 1
- D: 1 1


## A Piece of π

.play -edit -numbers pi.go

- A: 3
- B: 3.1415929203539825
- C: Won't compile
- D: 4

## Such Emptiness

.play -edit -numbers empty_map_ok.go

- A: 1
- B: panic
- C: ""
- D: 0

## Not Your Type

.play -edit -numbers stridx.go

- A: int8
- B: uint8
- C: byte
- D: rune

## Something New

.play -edit -numbers vars2.go

- A: 1 2 3
- B: Won't compile
- C: 1 3 4
- D: 1 1 3

## Are We There Yet?

.play -edit -numbers time.go

- A: before
- B: before after
- C: Won't compile
- D: Deadlock

## Power To the Gophers

.play -edit -numbers xor.go

- A: Won't compile
- B: 1024
- C: 512
- D: 8

## Shaken, Not Stirred

.code -edit -numbers loc.go /^type Loc/,/^}/
.play -edit -numbers loc.go /^func main/,/^}/

- A: Won't compile
- B: [Q]
- C: [007 M]
- D: panic

## Sleep Sort

.play -edit -numbers sleep_sort.go /^func main/,/^}/

- A: 1 2 3
- B: 3 1 2
- C: 2 2 2
- D: Deadlock

## Nothing For Me

.code -edit -numbers nilwtr.go /^func Open/,/^}/
.play -edit -numbers nilwtr.go /^func main/,/^}/

- A: true
- B: panic
- C: false
- D: Won't compile

## A Bald Move

.play -edit -numbers print_char.go

- A: 61
- B: a
- C: 97
- D: S

## Leftovers

.play -edit -numbers ch.go

- A: 0
- B: deadlock
- C: 2
- D: panic

## Exact Much?

.play -edit -numbers float.go

- A: true
- B: false
- C: Won't compile
- D: panic

## Function Var

.code -edit -numbers fnvar.go /^var fn/,/^}/
.play -edit -numbers fnvar.go /^func main/,/^}/

- A: 3 2 1 0
- B: Won't compile
- C: 3 Amigos 
- D: panic

## A Funny Number

.play -edit -numbers num.go

- A: Won't compile
- B: 1
- C: -1
- D: 0.25

## At the Same Time

.play -edit -numbers time_eq.go /^func main/,/^}/

- A: false
- B: true
- C: panic
- D: Won't compile

## A Troll

.play -edit -numbers for_under.go

- A: 0 1 2
- B: Won't compile
- C: 1 2 3
- D: panic

## The Best Thing Since Sliced Bread

.play -edit -numbers append3.go

- A: [1 2 3] [1 10]
- B: [1 2 3] [1 2]
- C: [1 10 3] [1 10]
- D: panic

## A Toxic Number

.play -edit -numbers strint.go

- A: 0x2622
- B: 9762
- C: ☢
- D: won't compile

## A Hefty Bonus

.play -edit -numbers bonus.go /^func main/,/^}/

- A: [{Wednesday 1000123} {Pugsley 136}]
- B: [{Wednesday 1000000} {Pugsley 13}]
- C: Won't compile
- D: [{Wednesday 1000123} {Pugsley 13}]

## Who's On First?

.play -edit -numbers range_str.go /^func main/,/^}/

- A: 0 1 2 3 6 7
- B: Who’s on first?
- C: Who’s
- D: Deadlock

## There Can Be Only One

.play -edit -numbers mapnan.go
- A: <nil>
- B: map[]
- C: map[NaN:MacLeod]
- D: panic

## Default Case

.play -edit -numbers resolve.go

- A: 3
- B: 0
- C: Won't compile
- D: panic

## Let's Get Shifty

.code -edit -numbers iota.go /^const/,/^\)/
.play -edit -numbers iota.go /^func main/,/^}/

- A: 3
- B: 2
- C: Won't compile
- D: 4

## Nothing in General

.code -edit -numbers nil_generic.go /^func Max/,/^}/
.play -edit -numbers nil_generic.go /^func main/,/^}/

- A: 0
- B: panic
- C: Won't compile
- D: 0.0

## The End

How many did you get right?

.image go-brain-teasers.png


// ## Pointers
// 
// .play -edit -numbers ptr.go
// 
// - A: 9 8
// - B: 8 9
// - C: 8 8
// - D: 9 9

// ## Map
// 
// .play -edit -numbers empty_map.go
// 
// - A: 1
// - B: 0
// - C: Won't compile
// - D: panic

// ## For
// 
// .play -edit -numbers str.go
// 
// - A: K r a k ó w
// - B: 0 1 2 3 4 5
// - C: 0 1 2 3 4 6
// - D: Kraków

// ## Ints & Floats
// 
// .play -edit -numbers float_int2.go
// 
// - A: 36
// - B: 33
// - C: Won't compile
// - D: 36.3

// ## Slices
// 
// .play -edit -numbers slice.go
// 
// - A: [1 2 3]
// - B: [1 2 99]
// - C: [99 2 3]
// - D: [1 99 3]
 
// ## Types
// 
// .play -edit -numbers callers.go
// 
// - A: [0 1 2]
// - B: [0 0 0]
// - C: [1 2 3]
// - D: Won't compile

// ## For
// 
// .play -edit -numbers for.go
// 
// - A: s u p ?
// - B: c c c c
// - C: Won't compile
// - D: sup?

// ## Vars
// 
// .play -edit -numbers vars3.go
// 
// - A: 3 5
// - B: ∞ loop
// - C: 8 8
// - D: 8 3

// ## Struct
// 
// .play -edit -numbers underscore.go
// 
// - A: Won't compile
// - B: {1 2 3}
// - C: {1 0 3}
// - D: {0 0 0}

// ## Tick
// 
// .play -edit -numbers tick.go
// 
// - A: bye
// - B: Won't compile
// - C: Deadlock
// - D: bye bye

// ## Vars
// 
// .play -edit -numbers vars.go
// 
// - A: 1 2
// - B: 1 3
// - C: Won't compile
// - D: 3 4
// 

// ## Map
// 
// .play -edit -numbers map.go
// 
// - A: 1
// - B: 0
// - C: Won't compile
// - D: panic
// 

// ## Rune
// 
// .play -edit -numbers rune.go
// 
// - A: int8
// - B: rune
// - C: int32
// - D: uint32
// 

// ## Append
// 
// .play -edit -numbers sliceappend.go
// 
// - A: [1 2 3 4]
// - B: [1 99 3 4]
// - C: [1 2 99 3]
// - D: [1 2 3]
// 

// ## Mixed Types
// 
// .play -edit -numbers float_int.go
// 
// - A: 36
// - B: 33
// - C: Won't compile
// - D: 36.3
// 

// ## Init
// 
// .play -edit -numbers init.go
// 
// - A: A B
// - B: B A
// - C: B
// - D: Won't compile
// 

// ## Error
// 
// .play -edit -numbers err.go
// 
// - A: error: <nil>
// - B: panic
// - C: Won't compile
// - D: OK
// 

// ## nil
// 
// .play -edit -numbers nilrcv.go
// 
// - A: panic
// - B: won't compile
// - C: 1
// - D: 2

// ## Defer
// 
// .play -edit -numbers defer.go
// 
// - A: 2 1 0
// - B: 2 2 2
// - C: 0 1 2
// - D: 3 3 3

// ## Strings
// 
// .play -edit -numbers streq.go
// 
// - A: false
// - B: true
// - C: Won't compile
// - D: 1

// ## Quote
// 
// .play -edit -numbers quote.go
// 
// - A: string string
// - B: rune string
// - C: int32 string
// - D: int32 int32

// ## String
// 
// .play -edit -numbers raw.go
// 
// - A: Won't compile
// - B: a\tb
// - C: a	b
// - D: a9b

// ## Interface
// 
// .play -edit -numbers iface.go /^type Writer/,
// 
// - A: Read
// - B: Write
// - C: Won't compile
// - D: There's no D
// 
// : Jeff Wendling at [[https://gophers.slack.com/archives/C1C1YSQBT/p1578455202043500][#darkarts]]

// ## Compare
// 
// .play -edit -numbers nil_slice.go
// 
// - A: panic
// - B: true
// - C: false
// - D: won't compile

// ## An Exit Strategy
// 
// .play -edit -numbers exit.go
// 
// - A: 0 1 2 3 4
// - B: panic
// - C: nothing
// - D: deadlock

// ## Append & Slice
// 
// .play -edit -numbers append2.go
// 
// - A: [1 10 3] [1 10]
// - B: panic
// - C: [1 2 3] [1 2]
// - D: [1 2 3] [1 10]

// ## C String
// 
// .play -edit -numbers c_str.go
// 
// - A: Panic
// - B: -
// - C: Go is better
// - D: Won't compile

// ## ???
// 
// .play -edit -numbers times.go
// 
// - A: panic
// - B: {Hello 2020-03-21 00:00:00 +0200 IST}
// - C: {Hello 2020-03-21 00:00:00 +0000 UTC}
// - D: 2020-03-21 00:00:00 +0000 UTC

// ## ???
// 
// .play -edit -numbers cmp.go
// 
// - A: Won't compile
// - B: true
// - C: false
// - D: panic


// ## Size Me Up
// 
// .play -edit -numbers unicode.go
// 
// - A: 6
// - B: 7
// - C: 8
// - D: Won't compile

// ## Self Append
// 
// .play -edit -numbers appendfor.go
// 
// - A: Hang
// - B: [1 2 3 1 2 3]
// - C: [1 2 3 0 1 2]
// - D: [1 2 3 [1 2 3]]

// ## Return to Sender, Address Unknown
// 
// .code -edit -numbers addr.go /^type Message/,/^}/
// .play -edit -numbers addr.go /^func main/,/^}/
// 
// - A: 1 
// - B: 2
// - C: 4
// - D: 7
